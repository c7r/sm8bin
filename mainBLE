#include <Preferences.h>
#include <Wire.h>
#include <time.h>
#include <HCSR04.h>
#include <esp_sleep.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

#define TRIGGER_PIN 18
#define ECHO_PIN 15
#define BUTTON_PIN 4
#define MAX_DISTANCE 200 // Maximum distance to measure (in cm)
#define MEASURE_INTERVAL_MS 100 // Interval between measurements in milliseconds
#define MEASURE_DURATION_MS 5000 // Total duration to measure in milliseconds
#define BUTTON_HOLD_TIME 2000 // Time in milliseconds for button hold
#define SLEEP_DURATION_SEC 30 // Deep sleep duration in seconds

Preferences preferences;
BLEServer *pServer = NULL;
BLECharacteristic *pCharacteristic = NULL;

bool deviceConnected = false;
bool oldDeviceConnected = false;

void initTime() {
  configTime(0, 0, "pool.ntp.org");
  while (time(nullptr) < 100000) {
    delay(100);
  }
}

uint32_t getTime() {
  struct timeval tv;
  gettimeofday(&tv, NULL);
  return tv.tv_sec;
}

uint16_t measureDistance() {
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);

  unsigned long duration = pulseIn(ECHO_PIN, HIGH, MAX_DISTANCE * 58);
  uint16_t distance = duration / 58.0;
  return distance;
}

uint16_t measureAverageDistance() {
  uint32_t startTime = millis();
  uint32_t endTime = startTime + MEASURE_DURATION_MS;
  uint32_t measurementCount = 0;
  uint32_t distanceSum = 0;

  while (millis() < endTime) {
    uint16_t distance = measureDistance();
    if (distance > 0) {
      distanceSum += distance;
      measurementCount++;
    }
    delay(MEASURE_INTERVAL_MS);
  }

  if (measurementCount > 0) {
    return distanceSum / measurementCount;
  } else {
    return 0;
  }
}

void storeMeasurement(uint32_t timestamp, uint16_t distance) {
  preferences.begin("storage", false);
  int index = preferences.getInt("index", 0);
  String key = "data" + String(index);
  String data = String(timestamp) + "," + String(distance);
  preferences.putString(key.c_str(), data);
  preferences.putInt("index", index + 1);
  preferences.end();
}

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  };

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
  }
};

void setup() {
  Serial.begin(115200);
  delay(1000);

  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  initTime();
  uint32_t timestamp = getTime();
  uint16_t averageDistance = measureAverageDistance();
  storeMeasurement(timestamp, averageDistance);

  Serial.print("Stored: ");
  Serial.print(timestamp);
  Serial.print(", ");
  Serial.println(averageDistance);

  BLEDevice::init("ESP32DistanceSensor");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServer->createService(BLEUUID((uint16_t)0x181A));
  pCharacteristic = pService->createCharacteristic(
                      BLEUUID((uint16_t)0x2A6E),
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(BLEUUID((uint16_t)0x181A));
  pAdvertising->start();

  esp_sleep_enable_timer_wakeup(SLEEP_DURATION_SEC * 1000000);
  esp_deep_sleep_start();
}

void streamDataOverBLE() {
  preferences.begin("storage", true);
  int index = preferences.getInt("index", 0);

  for (int i = 0; i < index; i++) {
    String key = "data" + String(i);
    String data = preferences.getString(key.c_str(), "");
    if (data != "") {
      pCharacteristic->setValue(data.c_str());
      pCharacteristic->notify();
      delay(100); // Small delay to ensure data is sent
    }
  }

  preferences.end();
}

void loop() {
  static uint32_t buttonPressStart = 0;

  if (digitalRead(BUTTON_PIN) == LOW) {
    if (buttonPressStart == 0) {
      buttonPressStart = millis();
    } else if (millis() - buttonPressStart > BUTTON_HOLD_TIME) {
      if (deviceConnected) {
        streamDataOverBLE();
      }
    }
  } else {
    buttonPressStart = 0;
  }

  if (!deviceConnected && oldDeviceConnected) {
    delay(500);
    pServer->startAdvertising();
    oldDeviceConnected = deviceConnected;
  }

  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
  }
}
