#include <BLE2902.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <Preferences.h>
// #include <Ultrasonic.h> // Include the Ultrasonic library

// Pins for sensors and button
const int IR_SENSOR_PIN = 27;
// const int US_TRIGGER_PIN = 5;
// const int US_ECHO_PIN = 18;
const int BUTTON_PIN = 14;

// BLE parameters
BLEServer *pServer = NULL;
BLECharacteristic *pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;
const char* SERVICE_UUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b";
const char* CHARACTERISTIC_UUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8";

// Operation mode
enum Mode { MEASUREMENT_MODE, DEEP_SLEEP_MODE };
Mode currentMode = MEASUREMENT_MODE;

// Timing
const uint64_t SLEEP_INTERVAL_US = 10 * 1000000; // 10 seconds in microseconds
const int MEASURE_INTERVAL_MS = 2000; // 2 seconds

// Button state
unsigned long buttonPressTime = 0;
bool buttonPressed = false;

// Preferences
Preferences preferences;
const char* PREFERENCES_NAMESPACE = "sensorData";

// Create Ultrasonic object
// Ultrasonic ultrasonic(US_ECHO_PIN);

// Callback for BLE connection status
class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
  }
};

void setup() {
  Serial.begin(115200);

  // Setup pins
  pinMode(IR_SENSOR_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  // Setup BLE
  BLEDevice::init("ESP32_BLE");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();

  // Start in measurement mode
  measureAndSleep();
}

void loop() {
  // Check button press for mode change
  if (digitalRead(BUTTON_PIN) == LOW) {
    if (!buttonPressed) {
      buttonPressed = true;
      buttonPressTime = millis();
    }
  } else {
    buttonPressed = false;
  }

  // Handle BLE connection status
  if (deviceConnected) {
    if (!oldDeviceConnected) {
      oldDeviceConnected = deviceConnected;
    }
  } else if (oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
    pServer->startAdvertising();
  }
}

void measureAndSleep() {
  currentMode = MEASUREMENT_MODE;
  Serial.println("Measuring...");

  int irDistance = 0;
  // int usDistance = 0;
  for (int i = 0; i < 10; i++) { // Take multiple samples for averaging
    irDistance += analogRead(IR_SENSOR_PIN);
    //usDistance += ultrasonic.MeasureInCentimeters();
    //Serial.printf("%d,%d \n", irDistance, usDistance);
    Serial.printf("%d \n", irDistance);
    delay(200);
  }
  irDistance /= 100;

//   int getUltrasonicDistance() {
//   digitalWrite(US_TRIGGER_PIN, LOW);
//   delayMicroseconds(2);
//   digitalWrite(US_TRIGGER_PIN, HIGH);
//   delayMicroseconds(10);
//   digitalWrite(US_TRIGGER_PIN, LOW);

//   long duration = pulseIn(US_ECHO_PIN, HIGH);
//   int distance = duration * 0.034 / 2;
//   return distance;
// }

  // Save measurements with timestamp
  preferences.begin(PREFERENCES_NAMESPACE, false);
  unsigned long timestamp = millis();
  preferences.putInt("irDistance", irDistance);
  // preferences.putInt("usDistance", usDistance);
  preferences.putULong("timestamp", timestamp);
  preferences.end();
  
  // Serial.printf("IR Distance: %d, US Distance: %d, Timestamp: %lu\n", irDistance, usDistance, timestamp);
  Serial.printf("IR Distance: %d,Timestamp: %lu\n", irDistance, timestamp);


  // Go to deep sleep
  currentMode = DEEP_SLEEP_MODE;
  Serial.println("Entering deep sleep...");
  esp_sleep_enable_timer_wakeup(SLEEP_INTERVAL_US);
  esp_deep_sleep_start();
}
