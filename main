#include <Preferences.h>
#include <Wire.h>
#include <time.h>
#include <HCSR04.h>
#include <esp_sleep.h>

// Ultrasonic Sensor Pins
#define TRIGGER_PIN  18
#define ECHO_PIN     15
#define MAX_DISTANCE 200 // Maximum distance to measure (in cm)
#define MEASURE_INTERVAL_MS 100 // Interval between measurements in milliseconds
#define MEASURE_DURATION_MS 5000 // Total duration to measure in milliseconds

// Initialize preferences
Preferences preferences;

// Function to get the current time as a Unix timestamp
uint32_t getTime() {
  struct timeval tv;
  gettimeofday(&tv, NULL);
  return tv.tv_sec;
}

// Function to measure distance
uint16_t measureDistance() {
  // Send a 10us pulse to trigger the sensor
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
  
  // Measure the duration of the echo pulse
  unsigned long duration = pulseIn(ECHO_PIN, HIGH, MAX_DISTANCE * 58);

  // Calculate the distance in cm
  uint16_t distance = duration / 58.0;

  // Return the measured distance
  return distance;
}

// Function to measure distance multiple times and calculate average
uint16_t measureAverageDistance() {
  uint32_t startTime = millis();
  uint32_t endTime = startTime + MEASURE_DURATION_MS;
  uint32_t measurementCount = 0;
  uint32_t distanceSum = 0;

  while (millis() < endTime) {
    uint16_t distance = measureDistance(); // Get distance in cm
    if (distance > 0) {
      distanceSum += distance;
      measurementCount++;
    }
    delay(MEASURE_INTERVAL_MS); // Wait between measurements
  }

  if (measurementCount > 0) {
    return distanceSum / measurementCount; // Calculate average distance
  } else {
    return 0; // Return 0 if no valid measurements
  }
}

// Function to store data
void storeMeasurement(uint32_t timestamp, uint16_t distance) {
  // Open preferences with namespace "storage"
  preferences.begin("storage", false);

  // Get the current index
  int index = preferences.getInt("index", 0);

  // Create a key for the current index
  String key = "data" + String(index);

  // Store the timestamp and distance as a single string
  String data = String(timestamp) + "," + String(distance);
  preferences.putString(key.c_str(), data);

  // Increment and store the new index
  preferences.putInt("index", index + 1);

  // Close preferences
  preferences.end();
}

void setup() {
  Serial.begin(115200);
  delay(1000); // Give time for the serial monitor to open

  // Initialize pins
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Get the current timestamp
  uint32_t timestamp = getTime();

  // Measure average distance over 5 seconds
  uint16_t averageDistance = measureAverageDistance();

  // Store the measurement
  storeMeasurement(timestamp, averageDistance);

  // Print the stored data for debugging
  Serial.print("Stored: ");
  Serial.print(timestamp);
  Serial.print(", ");
  Serial.println(averageDistance);

  // Configure deep sleep to wake up after 30 seconds
  esp_sleep_enable_timer_wakeup(10 * 1000000); // 30 seconds in microseconds
  esp_deep_sleep_start(); // Enter deep sleep
}

void loop() {
  // No need to use loop as the ESP32 will be in deep sleep
}
