#include <Arduino.h>
#include <Preferences.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <Ultrasonic.h>
#include <nvs_flash.h>
#include <esp_sleep.h>

#define SERVICE_UUID        "6E400001-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define BUTTON_PIN          0 // Define your button pin here
#define ECHO_PIN            4 // Define your ultrasonic sensor echo pin
#define DISCONNECT_TIMEOUT  180000 // 3 minutes in milliseconds
#define DEEP_SLEEP_DURATION 120e6  // 2 minutes in microseconds

Preferences preferences;
const char* preferencesNamespace = "measurements";
const int numMeasurements = 10;
unsigned long lastConnectionTime = 0;
unsigned long lastButtonPressTime = 0;
bool deviceConnected = false;
int mode = 0; // 0 = measurement mode, 1 = deep sleep mode, 2 = streaming mode
bool buttonPressedTwice = false;

Ultrasonic ultrasonic(ECHO_PIN);

struct Measurement {
  uint32_t timestamp;
  int32_t value;
};

// Function to generate and save actual measurements
void generateMeasurements() {
  preferences.begin(preferencesNamespace, false);
  if (!preferences.getBool("initialized", false)) {
    Serial.println("Generating and saving measurements...");
    for (int i = 0; i < numMeasurements; i++) {
      Measurement m;
      long distance = ultrasonic.MeasureInCentimeters();
      m.value = distance;
      m.timestamp = (uint32_t)time(NULL); // Unix timestamp

      preferences.putUInt(("ts" + String(i)).c_str(), m.timestamp);
      preferences.putInt(("val" + String(i)).c_str(), m.value);

      Serial.printf("Measured and saved Measurement %d: Timestamp = %u, Value = %d\n", i, m.timestamp, m.value);
    }
    preferences.putBool("initialized", true);
  }
  preferences.end();
}

void getMeasurementsArray(uint8_t* data) {
  Measurement measurements[numMeasurements];
  preferences.begin(preferencesNamespace, true);
  Serial.println("Retrieving measurements data from Preferences:");
  for (int i = 0; i < numMeasurements; i++) {
    measurements[i].timestamp = preferences.getUInt(("ts" + String(i)).c_str(), 0);
    measurements[i].value = preferences.getInt(("val" + String(i)).c_str(), 0);
    memcpy(data + (i * 8), &measurements[i].timestamp, 4);
    memcpy(data + (i * 8) + 4, &measurements[i].value, 4);
    
    Serial.printf("Retrieved Measurement %d: Timestamp = %u, Value = %d\n", i, measurements[i].timestamp, measurements[i].value);
  }
  preferences.end();
}

void getMeasurementsCSV(char* csv) {
  preferences.begin(preferencesNamespace, true);
  strcpy(csv, "Timestamp,Value\n");
  for (int i = 0; i < numMeasurements; i++) {
    uint32_t ts = preferences.getUInt(("ts" + String(i)).c_str(), 0);
    int32_t val = preferences.getInt(("val" + String(i)).c_str(), 0);
    char line[32];
    sprintf(line, "%u,%d\n", ts, val);
    strcat(csv, line);
  }
  preferences.end();
}

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      lastConnectionTime = millis();
      Serial.println("Device connected via BLE.");
    }

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("Device disconnected.");
      esp_sleep_enable_timer_wakeup(DEEP_SLEEP_DURATION);
      esp_deep_sleep_start();
    }
};

class MyCallbacks: public BLECharacteristicCallbacks {
    void onRead(BLECharacteristic* pCharacteristic) {
      Serial.println("Data read by client.");
      char csv[1024];
      getMeasurementsCSV(csv);
      pCharacteristic->setValue((uint8_t*)csv, strlen(csv));

      Serial.println("Transferred dataset:");
      Serial.println(csv);
    }
};

void enterDeepSleep() {
  esp_sleep_enable_timer_wakeup(DEEP_SLEEP_DURATION);
  esp_deep_sleep_start();
}

void setupBLE() {
  BLEDevice::init("BSR_smart_bin");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ
                    );
  pCharacteristic->setCallbacks(new MyCallbacks());
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("Waiting for a client connection to notify...");
}

void setup() {
  Serial.begin(115200);

  esp_err_t err = nvs_flash_init();
  if (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) {
    nvs_flash_erase();
    err = nvs_flash_init();
  }
  if (err != ESP_OK) {
    Serial.printf("NVS initialization failed with error: %s\n", esp_err_to_name(err));
    while (true); 
  }

  pinMode(BUTTON_PIN, INPUT);
  mode = 1; // Start in deep sleep mode
  enterDeepSleep();
}

void loop() {
  if (mode == 0) { 
    // Measurement Mode
    generateMeasurements();
    mode = 1;
    enterDeepSleep();
  } else if (mode == 1) { 
    // Deep Sleep Mode
    if (digitalRead(BUTTON_PIN) == HIGH) {
      unsigned long currentTime = millis();
      if (currentTime - lastButtonPressTime < 1000) {
        buttonPressedTwice = true;
      }
      lastButtonPressTime = currentTime;
    }
    if (buttonPressedTwice) {
      delay(2000); 
      buttonPressedTwice = false;
      mode = 2; 
      setupBLE();
    }
  } else if (mode == 2) { 
    // Streaming Mode
    if (deviceConnected) {
      if (millis() - lastConnectionTime > DISCONNECT_TIMEOUT) {
        pServer->disconnect(pServer->getConnId());
      }
    }
    if (digitalRead(BUTTON_PIN) == HIGH) {
      unsigned long pressTime = millis();
      while (digitalRead(BUTTON_PIN) == HIGH) {
        if (millis() - pressTime > 2000) {
          mode = 1;
          enterDeepSleep();
        }
      }
    }
  }
}
